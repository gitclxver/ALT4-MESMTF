<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MESMTF Login</title>
    <!-- Use Tailwind CSS for rapid styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Use Inter font from Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
        }

        /* Custom CSS to overlay the form on the canvas */
        .login-container {
            position: relative;
            z-index: 10;
        }
        
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
        }

        .form-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            -webkit-backdrop-filter: blur(15px);
        }

        .input-field {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
    </style>
</head>

<body class="bg-gray-900 text-white flex items-center justify-center min-h-screen">

    <!-- The Canvas for the dynamic background animation -->
    <canvas id="canvas"></canvas>

    <!-- Main login container -->
    <div class="login-container w-full max-w-sm mx-auto p-4 md:p-8">
        <div class="form-card rounded-3xl shadow-2xl p-6">
            <h2 class="text-3xl font-bold text-center text-teal-300 mb-2">MESMTF</h2>
            <p class="text-center text-gray-200 mb-8">Login to your account</p>

            <!-- Login Form -->
            <form id="loginForm" class="space-y-6">
                <!-- Email Input -->
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-300 mb-2">Email Address</label>
                    <input type="email" id="email" name="email"
                        class="input-field w-full px-4 py-3 rounded-xl bg-gray-800 text-gray-100 border border-gray-700 focus:border-teal-400 focus:outline-none focus:ring-1 focus:ring-teal-400"
                        placeholder="your.email@example.com" required>
                    <p id="emailError" class="text-xs text-red-400 mt-1 opacity-0 transition-opacity">
                        Please enter a valid email address.
                    </p>
                </div>

                <!-- Password Input -->
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-300 mb-2">Password</label>
                    <input type="password" id="password" name="password"
                        class="input-field w-full px-4 py-3 rounded-xl bg-gray-800 text-gray-100 border border-gray-700 focus:border-teal-400 focus:outline-none focus:ring-1 focus:ring-teal-400"
                        placeholder="••••••••" required>
                    <p id="passwordError" class="text-xs text-red-400 mt-1 opacity-0 transition-opacity">
                        Password must be at least 8 characters long.
                    </p>
                </div>

                <!-- Submit Button -->
                <button type="submit"
                    class="w-full py-3 px-4 bg-gradient-to-r from-teal-500 to-cyan-600 rounded-xl text-white font-semibold shadow-lg hover:from-teal-600 hover:to-cyan-700 transition-all duration-300 transform hover:scale-105">
                    Log In
                </button>
            </form>

            <div id="messageBox" class="hidden fixed inset-0 z-50 flex items-center justify-center">
                <div class="bg-gray-800 p-8 rounded-2xl shadow-xl border border-gray-700 max-w-sm w-full text-center">
                    <h3 class="text-2xl font-bold text-green-400 mb-4">Login Successful!</h3>
                    <p class="text-gray-200">Welcome to MESMTF. You can now proceed to the dashboard.</p>
                    <button id="closeButton" class="mt-6 py-2 px-6 bg-teal-500 text-white rounded-xl hover:bg-teal-600 transition-colors">
                        Close
                    </button>
                </div>
            </div>

            <p class="text-center text-sm text-gray-400 mt-6">
                Don't have an account? <a href="#" class="text-teal-400 hover:underline">Sign Up</a>
            </p>
        </div>
    </div>

    <script>
        // JavaScript for the dynamic canvas background and form validation

        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const form = document.getElementById('loginForm');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const emailError = document.getElementById('emailError');
        const passwordError = document.getElementById('passwordError');
        const messageBox = document.getElementById('messageBox');
        const closeButton = document.getElementById('closeButton');
        const nodes = [];
        const numNodes = 60;
        const maxDist = 150;

        // Node class for the canvas animation
        class Node {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.vx = Math.random() * 0.5 - 0.25;
                this.vy = Math.random() * 0.5 - 0.25;
                this.radius = 2;
                this.color = 'rgba(255, 255, 255, 0.5)';
            }

            // Method to update node position
            update() {
                this.x += this.vx;
                this.y += this.vy;
                if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
                if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
            }

            // Method to draw the node
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
            }
        }

        // Initialize the canvas and nodes
        function initCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            nodes.length = 0; // Clear existing nodes
            for (let i = 0; i < numNodes; i++) {
                nodes.push(new Node(Math.random() * canvas.width, Math.random() * canvas.height));
            }
        }

        // Animation loop
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            nodes.forEach(node => {
                node.update();
                node.draw();
            });

            // Draw connections between nodes
            for (let i = 0; i < nodes.length; i++) {
                for (let j = i + 1; j < nodes.length; j++) {
                    const dist = Math.sqrt(Math.pow(nodes[i].x - nodes[j].x, 2) + Math.pow(nodes[i].y - nodes[j].y, 2));
                    if (dist < maxDist) {
                        ctx.beginPath();
                        ctx.moveTo(nodes[i].x, nodes[i].y);
                        ctx.lineTo(nodes[j].x, nodes[j].y);
                        const opacity = 1 - (dist / maxDist);
                        ctx.strokeStyle = `rgba(255, 255, 255, ${opacity})`;
                        ctx.lineWidth = 1;
                        ctx.stroke();
                    }
                }
            }
            requestAnimationFrame(animate);
        }
        
        // --- Form Validation Functions ---
        function validateEmail(email) {
            const re = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
            return re.test(String(email).toLowerCase());
        }

        function validatePassword(password) {
            return password.length >= 8;
        }

        // --- Event Listeners ---
        
        // Initial setup
        window.addEventListener('load', initCanvas);
        window.addEventListener('resize', initCanvas);
        window.addEventListener('load', animate);

        // Real-time validation feedback on input
        emailInput.addEventListener('input', () => {
            const isValid = validateEmail(emailInput.value);
            if (isValid) {
                emailError.classList.add('opacity-0');
                emailInput.classList.remove('border-red-400');
                emailInput.classList.add('border-teal-400');
            } else {
                emailError.classList.remove('opacity-0');
                emailInput.classList.remove('border-teal-400');
                emailInput.classList.add('border-red-400');
            }
        });

        passwordInput.addEventListener('input', () => {
            const isValid = validatePassword(passwordInput.value);
            if (isValid) {
                passwordError.classList.add('opacity-0');
                passwordInput.classList.remove('border-red-400');
                passwordInput.classList.add('border-teal-400');
            } else {
                passwordError.classList.remove('opacity-0');
                passwordInput.classList.remove('border-teal-400');
                passwordInput.classList.add('border-red-400');
            }
        });

        // Form submission handler
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const isEmailValid = validateEmail(emailInput.value);
            const isPasswordValid = validatePassword(passwordInput.value);

            if (isEmailValid && isPasswordValid) {
                // All validation passed, show success message
                messageBox.classList.remove('hidden');
                // In a real application, you would send this data to a server here
                // e.g., using fetch() to a backend endpoint.
                console.log('Login successful!');
            } else {
                // Show validation errors if they haven't been shown yet
                if (!isEmailValid) {
                    emailError.classList.remove('opacity-0');
                    emailInput.classList.add('border-red-400');
                }
                if (!isPasswordValid) {
                    passwordError.classList.remove('opacity-0');
                    passwordInput.classList.add('border-red-400');
                }
            }
        });

        // Close button for the message box
        closeButton.addEventListener('click', () => {
            messageBox.classList.add('hidden');
        });

    </script>
</body>

</html>
